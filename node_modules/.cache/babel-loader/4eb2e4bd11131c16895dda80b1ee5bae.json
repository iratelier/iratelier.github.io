{"ast":null,"code":"import _asyncToGenerator from \"/Users/miracle/Documents/GitHub/iratelier.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/miracle/Documents/GitHub/iratelier.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/miracle/Documents/GitHub/iratelier.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _regeneratorRuntime from \"/Users/miracle/Documents/GitHub/iratelier.github.io/node_modules/@babel/runtime/regenerator/index.js\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\n\nvar PrecacheCacheKeyPlugin = /*#__PURE__*/_createClass(function PrecacheCacheKeyPlugin(_ref) {\n  var _this = this;\n\n  var precacheController = _ref.precacheController;\n\n  _classCallCheck(this, PrecacheCacheKeyPlugin);\n\n  this.cacheKeyWillBeUsed = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var request, params, cacheKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref2.request, params = _ref2.params;\n              // Params is type any, can't change right now.\n\n              /* eslint-disable */\n              cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) || _this._precacheController.getCacheKeyForURL(request.url);\n              /* eslint-enable */\n\n              return _context.abrupt(\"return\", cacheKey ? new Request(cacheKey, {\n                headers: request.headers\n              }) : request);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this._precacheController = precacheController;\n});\n\nexport { PrecacheCacheKeyPlugin };","map":{"version":3,"sources":["/Users/miracle/Documents/GitHub/iratelier.github.io/node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js"],"names":["PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","request","params","cacheKey","_precacheController","getCacheKeyForURL","url","Request","headers"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,sB,6BACF,sCAAoC;AAAA;;AAAA,MAAtBC,kBAAsB,QAAtBA,kBAAsB;;AAAA;;AAChC,OAAKC,kBAAL;AAAA,yEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,OAAT,SAASA,OAAT,EAAkBC,MAAlB,SAAkBA,MAAlB;AACtB;;AACA;AACMC,cAAAA,QAHgB,GAGL,CAACD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,QAAxD,KACb,KAAI,CAACC,mBAAL,CAAyBC,iBAAzB,CAA2CJ,OAAO,CAACK,GAAnD,CAJkB;AAKtB;;AALsB,+CAMfH,QAAQ,GACT,IAAII,OAAJ,CAAYJ,QAAZ,EAAsB;AAAEK,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAAnB,eAAtB,CADS,GAETP,OARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA;;AAUA,OAAKG,mBAAL,GAA2BL,kBAA3B;AACH,C;;AAEL,SAASD,sBAAT","sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n"]},"metadata":{},"sourceType":"module"}